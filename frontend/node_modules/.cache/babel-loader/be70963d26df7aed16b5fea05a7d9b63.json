{"ast":null,"code":"'use strict';\n/* global __resourceQuery WorkerGlobalScope self */\n\n/* eslint prefer-destructuring: off */\n\nvar url = require('url');\n\nvar stripAnsi = require('strip-ansi');\n\nvar log = require('loglevel').getLogger('webpack-dev-server');\n\nvar socket = require('./socket');\n\nvar overlay = require('./overlay');\n\nfunction getCurrentScriptSource() {\n  // `document.currentScript` is the most accurate way to find the current script,\n  // but is not supported in all browsers.\n  if (document.currentScript) {\n    return document.currentScript.getAttribute('src');\n  } // Fall back to getting all scripts in the document.\n\n\n  var scriptElements = document.scripts || [];\n  var currentScript = scriptElements[scriptElements.length - 1];\n\n  if (currentScript) {\n    return currentScript.getAttribute('src');\n  } // Fail as there was no script to use.\n\n\n  throw new Error('[WDS] Failed to get current script source.');\n}\n\nvar urlParts = void 0;\nvar hotReload = true;\n\nif (typeof window !== 'undefined') {\n  var qs = window.location.search.toLowerCase();\n  hotReload = qs.indexOf('hotreload=false') === -1;\n}\n\nif (typeof __resourceQuery === 'string' && __resourceQuery) {\n  // If this bundle is inlined, use the resource query to get the correct url.\n  urlParts = url.parse(__resourceQuery.substr(1));\n} else {\n  // Else, get the url from the <script> this file was called with.\n  var scriptHost = getCurrentScriptSource(); // eslint-disable-next-line no-useless-escape\n\n  scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n  urlParts = url.parse(scriptHost || '/', false, true);\n}\n\nif (!urlParts.port || urlParts.port === '0') {\n  urlParts.port = self.location.port;\n}\n\nvar _hot = false;\nvar initial = true;\nvar currentHash = '';\nvar useWarningOverlay = false;\nvar useErrorOverlay = false;\nvar useProgress = false;\nvar INFO = 'info';\nvar WARNING = 'warning';\nvar ERROR = 'error';\nvar NONE = 'none'; // Set the default log level\n\nlog.setDefaultLevel(INFO); // Send messages to the outside, so plugins can consume it.\n\nfunction sendMsg(type, data) {\n  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {\n    self.postMessage({\n      type: 'webpack' + type,\n      data: data\n    }, '*');\n  }\n}\n\nvar onSocketMsg = {\n  hot: function hot() {\n    _hot = true;\n    log.info('[WDS] Hot Module Replacement enabled.');\n  },\n  invalid: function invalid() {\n    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\n\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('Invalid');\n  },\n  hash: function hash(_hash) {\n    currentHash = _hash;\n  },\n  'still-ok': function stillOk() {\n    log.info('[WDS] Nothing changed.');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('StillOk');\n  },\n  'log-level': function logLevel(level) {\n    var hotCtx = require.context('webpack/hot', false, /^\\.\\/log$/);\n\n    if (hotCtx.keys().indexOf('./log') !== -1) {\n      hotCtx('./log').setLogLevel(level);\n    }\n\n    switch (level) {\n      case INFO:\n      case ERROR:\n        log.setLevel(level);\n        break;\n\n      case WARNING:\n        // loglevel's warning name is different from webpack's\n        log.setLevel('warn');\n        break;\n\n      case NONE:\n        log.disableAll();\n        break;\n\n      default:\n        log.error('[WDS] Unknown clientLogLevel \\'' + level + '\\'');\n    }\n  },\n  overlay: function overlay(value) {\n    if (typeof document !== 'undefined') {\n      if (typeof value === 'boolean') {\n        useWarningOverlay = false;\n        useErrorOverlay = value;\n      } else if (value) {\n        useWarningOverlay = value.warnings;\n        useErrorOverlay = value.errors;\n      }\n    }\n  },\n  progress: function progress(_progress) {\n    if (typeof document !== 'undefined') {\n      useProgress = _progress;\n    }\n  },\n  'progress-update': function progressUpdate(data) {\n    if (useProgress) log.info('[WDS] ' + data.percent + '% - ' + data.msg + '.');\n    sendMsg('Progress', data);\n  },\n  ok: function ok() {\n    sendMsg('Ok');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n\n    reloadApp();\n  },\n  'content-changed': function contentChanged() {\n    log.info('[WDS] Content base changed. Reloading...');\n    self.location.reload();\n  },\n  warnings: function warnings(_warnings) {\n    log.warn('[WDS] Warnings while compiling.');\n\n    var strippedWarnings = _warnings.map(function (warning) {\n      return stripAnsi(warning);\n    });\n\n    sendMsg('Warnings', strippedWarnings);\n\n    for (var i = 0; i < strippedWarnings.length; i++) {\n      log.warn(strippedWarnings[i]);\n    }\n\n    if (useWarningOverlay) overlay.showMessage(_warnings);\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n\n    reloadApp();\n  },\n  errors: function errors(_errors) {\n    log.error('[WDS] Errors while compiling. Reload prevented.');\n\n    var strippedErrors = _errors.map(function (error) {\n      return stripAnsi(error);\n    });\n\n    sendMsg('Errors', strippedErrors);\n\n    for (var i = 0; i < strippedErrors.length; i++) {\n      log.error(strippedErrors[i]);\n    }\n\n    if (useErrorOverlay) overlay.showMessage(_errors);\n    initial = false;\n  },\n  error: function error(_error) {\n    log.error(_error);\n  },\n  close: function close() {\n    log.error('[WDS] Disconnected!');\n    sendMsg('Close');\n  }\n};\nvar hostname = urlParts.hostname;\nvar protocol = urlParts.protocol; // check ipv4 and ipv6 `all hostname`\n\nif (hostname === '0.0.0.0' || hostname === '::') {\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n  // eslint-disable-next-line no-bitwise\n  if (self.location.hostname && !!~self.location.protocol.indexOf('http')) {\n    hostname = self.location.hostname;\n  }\n} // `hostname` can be empty when the script path is relative. In that case, specifying\n// a protocol would result in an invalid URL.\n// When https is used in the app, secure websockets are always necessary\n// because the browser doesn't accept non-secure websockets.\n\n\nif (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n  protocol = self.location.protocol;\n}\n\nvar socketUrl = url.format({\n  protocol: protocol,\n  auth: urlParts.auth,\n  hostname: hostname,\n  port: urlParts.port,\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : urlParts.path\n});\nsocket(socketUrl, onSocketMsg);\nvar isUnloading = false;\nself.addEventListener('beforeunload', function () {\n  isUnloading = true;\n});\n\nfunction reloadApp() {\n  if (isUnloading || !hotReload) {\n    return;\n  }\n\n  if (_hot) {\n    log.info('[WDS] App hot update...'); // eslint-disable-next-line global-require\n\n    var hotEmitter = require('webpack/hot/emitter');\n\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage('webpackHotUpdate' + currentHash, '*');\n    }\n  } else {\n    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)\n\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== 'about:') {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}","map":{"version":3,"sources":["/Users/ore/Documents/docker-vorboss/frontend/node_modules/webpack-dev-server/client/index.js"],"names":["url","require","stripAnsi","log","getLogger","socket","overlay","getCurrentScriptSource","document","currentScript","getAttribute","scriptElements","scripts","length","Error","urlParts","hotReload","window","qs","location","search","toLowerCase","indexOf","__resourceQuery","parse","substr","scriptHost","replace","port","self","_hot","initial","currentHash","useWarningOverlay","useErrorOverlay","useProgress","INFO","WARNING","ERROR","NONE","setDefaultLevel","sendMsg","type","data","WorkerGlobalScope","postMessage","onSocketMsg","hot","info","invalid","clear","hash","_hash","stillOk","logLevel","level","hotCtx","context","keys","setLogLevel","setLevel","disableAll","error","value","warnings","errors","progress","_progress","progressUpdate","percent","msg","ok","reloadApp","contentChanged","reload","_warnings","warn","strippedWarnings","map","warning","i","showMessage","_errors","strippedErrors","_error","close","hostname","protocol","socketUrl","format","auth","pathname","path","isUnloading","addEventListener","hotEmitter","emit","rootWindow","intervalId","setInterval","applyReload","parent","clearInterval"],"mappings":"AAAA;AAEA;;AACA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBG,SAApB,CAA8B,oBAA9B,CAAV;;AACA,IAAIC,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAArB;;AAEA,SAASM,sBAAT,GAAkC;AAChC;AACA;AACA,MAAIC,QAAQ,CAACC,aAAb,EAA4B;AAC1B,WAAOD,QAAQ,CAACC,aAAT,CAAuBC,YAAvB,CAAoC,KAApC,CAAP;AACD,GAL+B,CAMhC;;;AACA,MAAIC,cAAc,GAAGH,QAAQ,CAACI,OAAT,IAAoB,EAAzC;AACA,MAAIH,aAAa,GAAGE,cAAc,CAACA,cAAc,CAACE,MAAf,GAAwB,CAAzB,CAAlC;;AACA,MAAIJ,aAAJ,EAAmB;AACjB,WAAOA,aAAa,CAACC,YAAd,CAA2B,KAA3B,CAAP;AACD,GAX+B,CAYhC;;;AACA,QAAM,IAAII,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,IAAIC,QAAQ,GAAG,KAAK,CAApB;AACA,IAAIC,SAAS,GAAG,IAAhB;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,MAAIC,EAAE,GAAGD,MAAM,CAACE,QAAP,CAAgBC,MAAhB,CAAuBC,WAAvB,EAAT;AACAL,EAAAA,SAAS,GAAGE,EAAE,CAACI,OAAH,CAAW,iBAAX,MAAkC,CAAC,CAA/C;AACD;;AACD,IAAI,OAAOC,eAAP,KAA2B,QAA3B,IAAuCA,eAA3C,EAA4D;AAC1D;AACAR,EAAAA,QAAQ,GAAGf,GAAG,CAACwB,KAAJ,CAAUD,eAAe,CAACE,MAAhB,CAAuB,CAAvB,CAAV,CAAX;AACD,CAHD,MAGO;AACL;AACA,MAAIC,UAAU,GAAGnB,sBAAsB,EAAvC,CAFK,CAGL;;AACAmB,EAAAA,UAAU,GAAGA,UAAU,CAACC,OAAX,CAAmB,WAAnB,EAAgC,EAAhC,CAAb;AACAZ,EAAAA,QAAQ,GAAGf,GAAG,CAACwB,KAAJ,CAAUE,UAAU,IAAI,GAAxB,EAA6B,KAA7B,EAAoC,IAApC,CAAX;AACD;;AAED,IAAI,CAACX,QAAQ,CAACa,IAAV,IAAkBb,QAAQ,CAACa,IAAT,KAAkB,GAAxC,EAA6C;AAC3Cb,EAAAA,QAAQ,CAACa,IAAT,GAAgBC,IAAI,CAACV,QAAL,CAAcS,IAA9B;AACD;;AAED,IAAIE,IAAI,GAAG,KAAX;AACA,IAAIC,OAAO,GAAG,IAAd;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,iBAAiB,GAAG,KAAxB;AACA,IAAIC,eAAe,GAAG,KAAtB;AACA,IAAIC,WAAW,GAAG,KAAlB;AAEA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,OAAO,GAAG,SAAd;AACA,IAAIC,KAAK,GAAG,OAAZ;AACA,IAAIC,IAAI,GAAG,MAAX,C,CAEA;;AACApC,GAAG,CAACqC,eAAJ,CAAoBJ,IAApB,E,CAEA;;AACA,SAASK,OAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6B;AAC3B,MAAI,OAAOd,IAAP,KAAgB,WAAhB,KAAgC,OAAOe,iBAAP,KAA6B,WAA7B,IAA4C,EAAEf,IAAI,YAAYe,iBAAlB,CAA5E,CAAJ,EAAuH;AACrHf,IAAAA,IAAI,CAACgB,WAAL,CAAiB;AACfH,MAAAA,IAAI,EAAE,YAAYA,IADH;AAEfC,MAAAA,IAAI,EAAEA;AAFS,KAAjB,EAGG,GAHH;AAID;AACF;;AAED,IAAIG,WAAW,GAAG;AAChBC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClBjB,IAAAA,IAAI,GAAG,IAAP;AACA3B,IAAAA,GAAG,CAAC6C,IAAJ,CAAS,uCAAT;AACD,GAJe;AAKhBC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B9C,IAAAA,GAAG,CAAC6C,IAAJ,CAAS,mCAAT,EAD0B,CAE1B;;AACA,QAAIf,iBAAiB,IAAIC,eAAzB,EAA0C5B,OAAO,CAAC4C,KAAR;AAC1CT,IAAAA,OAAO,CAAC,SAAD,CAAP;AACD,GAVe;AAWhBU,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,KAAd,EAAqB;AACzBpB,IAAAA,WAAW,GAAGoB,KAAd;AACD,GAbe;AAehB,cAAY,SAASC,OAAT,GAAmB;AAC7BlD,IAAAA,GAAG,CAAC6C,IAAJ,CAAS,wBAAT;AACA,QAAIf,iBAAiB,IAAIC,eAAzB,EAA0C5B,OAAO,CAAC4C,KAAR;AAC1CT,IAAAA,OAAO,CAAC,SAAD,CAAP;AACD,GAnBe;AAoBhB,eAAa,SAASa,QAAT,CAAkBC,KAAlB,EAAyB;AACpC,QAAIC,MAAM,GAAGvD,OAAO,CAACwD,OAAR,CAAgB,aAAhB,EAA+B,KAA/B,EAAsC,WAAtC,CAAb;;AACA,QAAID,MAAM,CAACE,IAAP,GAAcpC,OAAd,CAAsB,OAAtB,MAAmC,CAAC,CAAxC,EAA2C;AACzCkC,MAAAA,MAAM,CAAC,OAAD,CAAN,CAAgBG,WAAhB,CAA4BJ,KAA5B;AACD;;AACD,YAAQA,KAAR;AACE,WAAKnB,IAAL;AACA,WAAKE,KAAL;AACEnC,QAAAA,GAAG,CAACyD,QAAJ,CAAaL,KAAb;AACA;;AACF,WAAKlB,OAAL;AACE;AACAlC,QAAAA,GAAG,CAACyD,QAAJ,CAAa,MAAb;AACA;;AACF,WAAKrB,IAAL;AACEpC,QAAAA,GAAG,CAAC0D,UAAJ;AACA;;AACF;AACE1D,QAAAA,GAAG,CAAC2D,KAAJ,CAAU,oCAAoCP,KAApC,GAA4C,IAAtD;AAbJ;AAeD,GAxCe;AAyChBjD,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiByD,KAAjB,EAAwB;AAC/B,QAAI,OAAOvD,QAAP,KAAoB,WAAxB,EAAqC;AACnC,UAAI,OAAOuD,KAAP,KAAiB,SAArB,EAAgC;AAC9B9B,QAAAA,iBAAiB,GAAG,KAApB;AACAC,QAAAA,eAAe,GAAG6B,KAAlB;AACD,OAHD,MAGO,IAAIA,KAAJ,EAAW;AAChB9B,QAAAA,iBAAiB,GAAG8B,KAAK,CAACC,QAA1B;AACA9B,QAAAA,eAAe,GAAG6B,KAAK,CAACE,MAAxB;AACD;AACF;AACF,GAnDe;AAoDhBC,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBC,SAAlB,EAA6B;AACrC,QAAI,OAAO3D,QAAP,KAAoB,WAAxB,EAAqC;AACnC2B,MAAAA,WAAW,GAAGgC,SAAd;AACD;AACF,GAxDe;AA0DhB,qBAAmB,SAASC,cAAT,CAAwBzB,IAAxB,EAA8B;AAC/C,QAAIR,WAAJ,EAAiBhC,GAAG,CAAC6C,IAAJ,CAAS,WAAWL,IAAI,CAAC0B,OAAhB,GAA0B,MAA1B,GAAmC1B,IAAI,CAAC2B,GAAxC,GAA8C,GAAvD;AACjB7B,IAAAA,OAAO,CAAC,UAAD,EAAaE,IAAb,CAAP;AACD,GA7De;AA8DhB4B,EAAAA,EAAE,EAAE,SAASA,EAAT,GAAc;AAChB9B,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA,QAAIR,iBAAiB,IAAIC,eAAzB,EAA0C5B,OAAO,CAAC4C,KAAR;AAC1C,QAAInB,OAAJ,EAAa,OAAOA,OAAO,GAAG,KAAjB,CAHG,CAGqB;;AACrCyC,IAAAA,SAAS;AACV,GAnEe;AAqEhB,qBAAmB,SAASC,cAAT,GAA0B;AAC3CtE,IAAAA,GAAG,CAAC6C,IAAJ,CAAS,0CAAT;AACAnB,IAAAA,IAAI,CAACV,QAAL,CAAcuD,MAAd;AACD,GAxEe;AAyEhBV,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBW,SAAlB,EAA6B;AACrCxE,IAAAA,GAAG,CAACyE,IAAJ,CAAS,iCAAT;;AACA,QAAIC,gBAAgB,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAUC,OAAV,EAAmB;AACtD,aAAO7E,SAAS,CAAC6E,OAAD,CAAhB;AACD,KAFsB,CAAvB;;AAGAtC,IAAAA,OAAO,CAAC,UAAD,EAAaoC,gBAAb,CAAP;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,gBAAgB,CAAChE,MAArC,EAA6CmE,CAAC,EAA9C,EAAkD;AAChD7E,MAAAA,GAAG,CAACyE,IAAJ,CAASC,gBAAgB,CAACG,CAAD,CAAzB;AACD;;AACD,QAAI/C,iBAAJ,EAAuB3B,OAAO,CAAC2E,WAAR,CAAoBN,SAApB;AAEvB,QAAI5C,OAAJ,EAAa,OAAOA,OAAO,GAAG,KAAjB,CAXwB,CAWA;;AACrCyC,IAAAA,SAAS;AACV,GAtFe;AAuFhBP,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBiB,OAAhB,EAAyB;AAC/B/E,IAAAA,GAAG,CAAC2D,KAAJ,CAAU,iDAAV;;AACA,QAAIqB,cAAc,GAAGD,OAAO,CAACJ,GAAR,CAAY,UAAUhB,KAAV,EAAiB;AAChD,aAAO5D,SAAS,CAAC4D,KAAD,CAAhB;AACD,KAFoB,CAArB;;AAGArB,IAAAA,OAAO,CAAC,QAAD,EAAW0C,cAAX,CAAP;;AACA,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,cAAc,CAACtE,MAAnC,EAA2CmE,CAAC,EAA5C,EAAgD;AAC9C7E,MAAAA,GAAG,CAAC2D,KAAJ,CAAUqB,cAAc,CAACH,CAAD,CAAxB;AACD;;AACD,QAAI9C,eAAJ,EAAqB5B,OAAO,CAAC2E,WAAR,CAAoBC,OAApB;AACrBnD,IAAAA,OAAO,GAAG,KAAV;AACD,GAlGe;AAmGhB+B,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAesB,MAAf,EAAuB;AAC5BjF,IAAAA,GAAG,CAAC2D,KAAJ,CAAUsB,MAAV;AACD,GArGe;AAsGhBC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBlF,IAAAA,GAAG,CAAC2D,KAAJ,CAAU,qBAAV;AACArB,IAAAA,OAAO,CAAC,OAAD,CAAP;AACD;AAzGe,CAAlB;AA4GA,IAAI6C,QAAQ,GAAGvE,QAAQ,CAACuE,QAAxB;AACA,IAAIC,QAAQ,GAAGxE,QAAQ,CAACwE,QAAxB,C,CAEA;;AACA,IAAID,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AACA;AACA;AACA;AACA,MAAIzD,IAAI,CAACV,QAAL,CAAcmE,QAAd,IAA0B,CAAC,CAAC,CAACzD,IAAI,CAACV,QAAL,CAAcoE,QAAd,CAAuBjE,OAAvB,CAA+B,MAA/B,CAAjC,EAAyE;AACvEgE,IAAAA,QAAQ,GAAGzD,IAAI,CAACV,QAAL,CAAcmE,QAAzB;AACD;AACF,C,CAED;AACA;AACA;AACA;;;AACA,IAAIA,QAAQ,KAAKzD,IAAI,CAACV,QAAL,CAAcoE,QAAd,KAA2B,QAA3B,IAAuCxE,QAAQ,CAACuE,QAAT,KAAsB,SAAlE,CAAZ,EAA0F;AACxFC,EAAAA,QAAQ,GAAG1D,IAAI,CAACV,QAAL,CAAcoE,QAAzB;AACD;;AAED,IAAIC,SAAS,GAAGxF,GAAG,CAACyF,MAAJ,CAAW;AACzBF,EAAAA,QAAQ,EAAEA,QADe;AAEzBG,EAAAA,IAAI,EAAE3E,QAAQ,CAAC2E,IAFU;AAGzBJ,EAAAA,QAAQ,EAAEA,QAHe;AAIzB1D,EAAAA,IAAI,EAAEb,QAAQ,CAACa,IAJU;AAKzB+D,EAAAA,QAAQ,EAAE5E,QAAQ,CAAC6E,IAAT,IAAiB,IAAjB,IAAyB7E,QAAQ,CAAC6E,IAAT,KAAkB,GAA3C,GAAiD,cAAjD,GAAkE7E,QAAQ,CAAC6E;AAL5D,CAAX,CAAhB;AAQAvF,MAAM,CAACmF,SAAD,EAAY1C,WAAZ,CAAN;AAEA,IAAI+C,WAAW,GAAG,KAAlB;AACAhE,IAAI,CAACiE,gBAAL,CAAsB,cAAtB,EAAsC,YAAY;AAChDD,EAAAA,WAAW,GAAG,IAAd;AACD,CAFD;;AAIA,SAASrB,SAAT,GAAqB;AACnB,MAAIqB,WAAW,IAAI,CAAC7E,SAApB,EAA+B;AAC7B;AACD;;AACD,MAAIc,IAAJ,EAAU;AACR3B,IAAAA,GAAG,CAAC6C,IAAJ,CAAS,yBAAT,EADQ,CAER;;AACA,QAAI+C,UAAU,GAAG9F,OAAO,CAAC,qBAAD,CAAxB;;AACA8F,IAAAA,UAAU,CAACC,IAAX,CAAgB,kBAAhB,EAAoChE,WAApC;;AACA,QAAI,OAAOH,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,CAACZ,MAAxC,EAAgD;AAC9C;AACAY,MAAAA,IAAI,CAACgB,WAAL,CAAiB,qBAAqBb,WAAtC,EAAmD,GAAnD;AACD;AACF,GATD,MASO;AACL,QAAIiE,UAAU,GAAGpE,IAAjB,CADK,CAEL;;AACA,QAAIqE,UAAU,GAAGrE,IAAI,CAACsE,WAAL,CAAiB,YAAY;AAC5C,UAAIF,UAAU,CAAC9E,QAAX,CAAoBoE,QAApB,KAAiC,QAArC,EAA+C;AAC7C;AACAa,QAAAA,WAAW,CAACH,UAAD,EAAaC,UAAb,CAAX;AACD,OAHD,MAGO;AACLD,QAAAA,UAAU,GAAGA,UAAU,CAACI,MAAxB;;AACA,YAAIJ,UAAU,CAACI,MAAX,KAAsBJ,UAA1B,EAAsC;AACpC;AACAG,UAAAA,WAAW,CAACH,UAAD,EAAaC,UAAb,CAAX;AACD;AACF;AACF,KAXgB,CAAjB;AAYD;;AAED,WAASE,WAAT,CAAqBH,UAArB,EAAiCC,UAAjC,EAA6C;AAC3CI,IAAAA,aAAa,CAACJ,UAAD,CAAb;AACA/F,IAAAA,GAAG,CAAC6C,IAAJ,CAAS,iCAAT;AACAiD,IAAAA,UAAU,CAAC9E,QAAX,CAAoBuD,MAApB;AACD;AACF","sourcesContent":["'use strict';\n\n/* global __resourceQuery WorkerGlobalScope self */\n/* eslint prefer-destructuring: off */\n\nvar url = require('url');\nvar stripAnsi = require('strip-ansi');\nvar log = require('loglevel').getLogger('webpack-dev-server');\nvar socket = require('./socket');\nvar overlay = require('./overlay');\n\nfunction getCurrentScriptSource() {\n  // `document.currentScript` is the most accurate way to find the current script,\n  // but is not supported in all browsers.\n  if (document.currentScript) {\n    return document.currentScript.getAttribute('src');\n  }\n  // Fall back to getting all scripts in the document.\n  var scriptElements = document.scripts || [];\n  var currentScript = scriptElements[scriptElements.length - 1];\n  if (currentScript) {\n    return currentScript.getAttribute('src');\n  }\n  // Fail as there was no script to use.\n  throw new Error('[WDS] Failed to get current script source.');\n}\n\nvar urlParts = void 0;\nvar hotReload = true;\nif (typeof window !== 'undefined') {\n  var qs = window.location.search.toLowerCase();\n  hotReload = qs.indexOf('hotreload=false') === -1;\n}\nif (typeof __resourceQuery === 'string' && __resourceQuery) {\n  // If this bundle is inlined, use the resource query to get the correct url.\n  urlParts = url.parse(__resourceQuery.substr(1));\n} else {\n  // Else, get the url from the <script> this file was called with.\n  var scriptHost = getCurrentScriptSource();\n  // eslint-disable-next-line no-useless-escape\n  scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n  urlParts = url.parse(scriptHost || '/', false, true);\n}\n\nif (!urlParts.port || urlParts.port === '0') {\n  urlParts.port = self.location.port;\n}\n\nvar _hot = false;\nvar initial = true;\nvar currentHash = '';\nvar useWarningOverlay = false;\nvar useErrorOverlay = false;\nvar useProgress = false;\n\nvar INFO = 'info';\nvar WARNING = 'warning';\nvar ERROR = 'error';\nvar NONE = 'none';\n\n// Set the default log level\nlog.setDefaultLevel(INFO);\n\n// Send messages to the outside, so plugins can consume it.\nfunction sendMsg(type, data) {\n  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {\n    self.postMessage({\n      type: 'webpack' + type,\n      data: data\n    }, '*');\n  }\n}\n\nvar onSocketMsg = {\n  hot: function hot() {\n    _hot = true;\n    log.info('[WDS] Hot Module Replacement enabled.');\n  },\n  invalid: function invalid() {\n    log.info('[WDS] App updated. Recompiling...');\n    // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('Invalid');\n  },\n  hash: function hash(_hash) {\n    currentHash = _hash;\n  },\n\n  'still-ok': function stillOk() {\n    log.info('[WDS] Nothing changed.');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('StillOk');\n  },\n  'log-level': function logLevel(level) {\n    var hotCtx = require.context('webpack/hot', false, /^\\.\\/log$/);\n    if (hotCtx.keys().indexOf('./log') !== -1) {\n      hotCtx('./log').setLogLevel(level);\n    }\n    switch (level) {\n      case INFO:\n      case ERROR:\n        log.setLevel(level);\n        break;\n      case WARNING:\n        // loglevel's warning name is different from webpack's\n        log.setLevel('warn');\n        break;\n      case NONE:\n        log.disableAll();\n        break;\n      default:\n        log.error('[WDS] Unknown clientLogLevel \\'' + level + '\\'');\n    }\n  },\n  overlay: function overlay(value) {\n    if (typeof document !== 'undefined') {\n      if (typeof value === 'boolean') {\n        useWarningOverlay = false;\n        useErrorOverlay = value;\n      } else if (value) {\n        useWarningOverlay = value.warnings;\n        useErrorOverlay = value.errors;\n      }\n    }\n  },\n  progress: function progress(_progress) {\n    if (typeof document !== 'undefined') {\n      useProgress = _progress;\n    }\n  },\n\n  'progress-update': function progressUpdate(data) {\n    if (useProgress) log.info('[WDS] ' + data.percent + '% - ' + data.msg + '.');\n    sendMsg('Progress', data);\n  },\n  ok: function ok() {\n    sendMsg('Ok');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n    reloadApp();\n  },\n\n  'content-changed': function contentChanged() {\n    log.info('[WDS] Content base changed. Reloading...');\n    self.location.reload();\n  },\n  warnings: function warnings(_warnings) {\n    log.warn('[WDS] Warnings while compiling.');\n    var strippedWarnings = _warnings.map(function (warning) {\n      return stripAnsi(warning);\n    });\n    sendMsg('Warnings', strippedWarnings);\n    for (var i = 0; i < strippedWarnings.length; i++) {\n      log.warn(strippedWarnings[i]);\n    }\n    if (useWarningOverlay) overlay.showMessage(_warnings);\n\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n    reloadApp();\n  },\n  errors: function errors(_errors) {\n    log.error('[WDS] Errors while compiling. Reload prevented.');\n    var strippedErrors = _errors.map(function (error) {\n      return stripAnsi(error);\n    });\n    sendMsg('Errors', strippedErrors);\n    for (var i = 0; i < strippedErrors.length; i++) {\n      log.error(strippedErrors[i]);\n    }\n    if (useErrorOverlay) overlay.showMessage(_errors);\n    initial = false;\n  },\n  error: function error(_error) {\n    log.error(_error);\n  },\n  close: function close() {\n    log.error('[WDS] Disconnected!');\n    sendMsg('Close');\n  }\n};\n\nvar hostname = urlParts.hostname;\nvar protocol = urlParts.protocol;\n\n// check ipv4 and ipv6 `all hostname`\nif (hostname === '0.0.0.0' || hostname === '::') {\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n  // eslint-disable-next-line no-bitwise\n  if (self.location.hostname && !!~self.location.protocol.indexOf('http')) {\n    hostname = self.location.hostname;\n  }\n}\n\n// `hostname` can be empty when the script path is relative. In that case, specifying\n// a protocol would result in an invalid URL.\n// When https is used in the app, secure websockets are always necessary\n// because the browser doesn't accept non-secure websockets.\nif (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n  protocol = self.location.protocol;\n}\n\nvar socketUrl = url.format({\n  protocol: protocol,\n  auth: urlParts.auth,\n  hostname: hostname,\n  port: urlParts.port,\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : urlParts.path\n});\n\nsocket(socketUrl, onSocketMsg);\n\nvar isUnloading = false;\nself.addEventListener('beforeunload', function () {\n  isUnloading = true;\n});\n\nfunction reloadApp() {\n  if (isUnloading || !hotReload) {\n    return;\n  }\n  if (_hot) {\n    log.info('[WDS] App hot update...');\n    // eslint-disable-next-line global-require\n    var hotEmitter = require('webpack/hot/emitter');\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage('webpackHotUpdate' + currentHash, '*');\n    }\n  } else {\n    var rootWindow = self;\n    // use parent window for reload (in case we're in an iframe with no valid src)\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== 'about:') {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}"]},"metadata":{},"sourceType":"script"}